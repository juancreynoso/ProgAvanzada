
-----------
Ejercicio 1
-----------

Demostrar que la concatenacion de listas es asociativa:
• (xs ++ ys) ++ zs = xs ++ (ys ++ zs)

[] ++ ys = ys
(x:xs) ++ ys = x : (xs ++ ys)

Caso base: xs = []
([] ++ ys) ++ zs
{def ++}
ys ++ zs
{def ys}
[] ++ (ys ++ zs)

Caso inductivo:
(x:xs ++ ys) ++ zs
{def ++}
x : (xs ++ ys) ++ zs
{HI}
x : xs ++ (ys ++ zs)
{def ++}
(x:xs) ++ (ys ++ zs)

-----------
Ejercicio 2
-----------

reversa :: [a] -> [a]
reversa [] = []
reversa (x:xs) = reversa xs ++ [x]

• reversa (xs ++ ys) = reversa ys ++ reversa xs (HI)

Caso base: xs = []
reversa ([] ++ ys) = reversa ys ++ reversa []
{def reversa}
reversa ([] ++ ys) = reversa ys ++ []
{def ++}
reversa ys = reversa ys
{logica}
True

Caso inductivo: 
reversa (x:xs ++ ys) = reversa ys ++ reversa (x:xs)
{def ++}
reversa (x:(xs ++ ys)) = reversa ys ++ reversa (x:xs)
{def reversa}
reversa (xs ++ ys) ++ [x] = reversa ys ++ reversa xs ++ [x]
{Hipotesis inductiva}
reversa (xs ++ ys) ++ [x] = reversa (xs ++ ys) ++ [x]
{Logica}
True

• reversa (reversa xs) = xs (HI)
caso base: xs = []
reversa (reversa []) = []
{def reversa}
reversa [] = []
{def reversa}
[] = []
{Logica}
True

caso inductivo:
reversa (reversa (x:xs)) = (x:xs)
{def reversa}
reversa (reversa xs ++ [x]) = (x:xs)
{reversa de ++}
reversa [x] ++ reversa (reversa xs) = (x:xs)
{Hipotesis inductiva}
(reversa [x]) ++ xs = (x:xs)
{def reversa}
[x] ++ [xs] = (x:xs)
{def ++}
(x:xs) = (x:xs)
{Logica}
True


-----------
Ejercicio 3
-----------

Especificar y derivar la siguiente función:
f xs dice si todos los elementos son iguales.

f :: [a] -> Bool 
f.xs = <paraTodo i : 0 <= i < #xs : xs.0 = xs.i>

Caso base:
= {Esp}
<paraTodo i : 0 <= i < #[] : [].0 = [].i>
= {Def #}
<paraTodo i : 0 <= i < 0 : [].0 = [].i>
=
<paraTodo i : False: [].0 = [].i>
= {Rango vacio}
True

HI: <paraTodo i : 0 <= i < #xs : xs.0 = xs.i>

Caso inductivo: 
f.(x:xs)
= {Especif}
<paraTodo i : 0 <= i < #(x:xs) : (x:xs).0 = (x:xs).i>
= {def #, def .}
<paraTodo i : 0 <= i < 1 + #xs : x = (x:xs).i>
= {logica}
<paraTodo i : 0 <= i < 1 ó 1 <= i < 1 + #xs : x = (x:xs).i>
= {Particion de rango}
<paraTodo i : 0 <= i < 1 : x = (x:xs).i> y <paraTodo i : 1 <= i < 1 + #xs : x = (x:xs).i>
= {Rango unitario, i <- i+1}
<x = (x:xs).0> y <paraTodo i : 1 <= i+1 < 1 + #xs : x = (x:xs).i+1>
= {Aritmetica, def .}
<x = (x:xs).0> y <paraTodo i : 0 <= i < #xs : x=xs.i> -- Me olvido de la x
= {def .}
x = x y <paraTodo i : 0 <= i < #xs : x=xs.i>
= {logica}
<paraTodo i : 0 <= i < #xs : x=xs.i>

Como no se puede aplicar la hipotesis inductiva utilizo otra tecnica: Modularizacion

HI: g.xs.z = <paraTodo i : 0 <= i < #xs : x = z=xs.i>

Caso base: xs = [] (z = xs.0)
= {Esp g}
<paraTodo i : 0 <= i < #[]: [].0>
= {Def #, rango vacio}
True

Caso inductivo: x:xs
= {Esp g}
<paraTodo i: 0 <= i < #x:xs : x = (x:xs).i>
= {Particion de rango}
<paraTodo i: 0 <= i < 1: z = (x:xs).i> y <paraTodo i: 1 <= i < 1 + #xs : x = (x:xs).i>
= {Rango vacio}
z = x y <paraTodo i: 1 <= i < 1 + #xs : z = (x:xs).i>
{Aritmetica, i <- i+1}
z = x y <paraTodo i: 0 <= i < #xs : z = xs.i
= {HI}
z = x y g.xs.z

Definicion de g
g.[].z = True
g.(x:xs).z = z = x y g.xs.z

Definicion de f
f.[] = True
f:(x:xs) = g.xs.z


-----------
Ejercicio 4
-----------

Especificar y derivar una funcion que dada una lista de numeros devuelva su producto.

f :: [Num] -> Num
f.xs = <Productoria i : 0 <= i < #xs : xs.i>

Derivacion por induccion
HI: <Productoria i : 0 <= i < #xs : xs.i>

Caso base: xs = []

= {def esp f}
<Productoria i : 0 <= i < #[] : [].i>
= {def #}
<Productoria i : 0 <= i < 0 : [].i>
= {Rango vacio, neutro productoria}
1

Caso inductivo: (x:xs)
= {def esp f}
<Productoria i : 0 <= i < #(x:xs) : (x:xs).i>
= {def #, def .}
<Productoria i : 0 <= i < 1 + #xs : (x:xs).i>
= {logica}
<Productoria i : 0 <= i < 1 ó 1 <= i < 1 + #xs : (x:xs).i>
= {Particion de rango}
<Productoria i : 0 <= i < 1 : x = (x:xs).i> * <Productoria i : 0 <= i < 1 + #xs : (x:xs).i>
= {Rango unitario, i <- i+1}
(x:xs).0 * <Productoria i : 0 <= i+1 < 1 + #xs : (x:xs).i+1>
= {Aritmetica, def .}
x * <Productoria i : 0 <= i < #xs : xs.i>
= {HI}
x * f.xs

Definicion:
f :: [Num] -> Num
f.xs = 1
f.(x:xs) = x * f.xs


-----------
Ejercicio 5
-----------

Derivar una funcion que dada una lista determina si los elementos estan ordenados de forma creciente.

f.xs = <V i : 0 <= i < #xs-1 : xs.i <= xs.i+1>

Caso base: 
= {esp f}
<V i : 0 <= i < #[]-1 : [].i <= [].i+1>
= {Rango vacio}
True

= {esp f}
<V i : 0 <= i < #[x]-1 : [x].i <= [x].i+1>
= {def #} {aritmetica}
<V i : 0 <= i < 0 : [x].i <= [x].i+1>
= {Rango vacio}
True

Caso inductivo: 
= {esp f}
<V i : 0 <= i < #(x:y:ys)-1 : (x:y:ys).i <= (x:y:ys).i+1>
= {def de #}
<V i : 0 <= i < 2 + #(xs)-1 : (x:y:ys).i <= (x:y:ys).i+1>
= {Aritmetica}
<V i : 0 <= i < 1 + #(xs) : (x:y:ys).i <= (x:y:ys).i+1>
= {part de rango}
<V i : 0 <= i < 1 : (x:y:ys).i <= (x:y:ys).i+1> && <V i : 0 <= i < #(xs) : (x:y:ys).i <= (x:y:ys).i+1>
= {rango unitario}
<V i : i = 0 : (x:y:ys).0 <= (x:y:ys).0+1> && <V i : 0 <= i < #(xs) : (x:y:ys).i <= (x:y:ys).i+1>
= {def i}
(x <= y ) && <V i : 0 <= i < #(xs) : (x:y:ys).i <= (x:y:ys).i+1>
= {reemplazo i = i+1}
(x <= y ) && <V i : 0 <= i+1 < #(xs) : (x:y:ys).i+1 <= (x:y:ys).i+1+1>
= {aritmetica en rango, def .}
(x <= y ) && <V i : 0 <= i < #(xs)-1 : (y:ys).i <= (y:ys).i+1>
= {Hip inductiva}
(x <= y ) && f.xs

Entonces, derivando obtengo:
f :: [a] -> Bool
f.[] = True
f.[x] = True
f.(x:y:ys) = x <= y && f.xs

-----------
Ejercicio 6
-----------

m :: [Num] -> Num

m.xs = <Min i : 0 <= i < #xs : xs.i>

caso base: m.[]
{especificacion m}
<Min i : 0 <= i < #[] : [].i>
{def #, rango vacio}
+infinito

caso inductivo: m.(x:xs)
{especificacion m}
<Min i : 0 <= i < #(x:xs) : (x:xs).i>
{def #}
<Min i : 0 <= i < 1 + #(xs) : (x:xs).i>
{part de rango}
<Min i : 0 <= i < 1 : (x:xs).i> Min <Min i : 1 <= i < 1 + #(xs) : (x:xs).i>
{rango unitario}
<Min i : i = 0 : (x:xs).0> Min <Min i : 0 <= i < 1 + #(xs) : (x:xs).i>
{def .}
x Min <Min i : 1 <= i < 1 + #xs : (x:xs).i>
{reemplazo i = i+1}
x Min <Min i : 1 <= i+1 < 1 + #xs : (x:xs).i+1>
{aritmetica} {def .} (resto 1)
x Min <Min i : 0 <= i < #xs : xs.i>
{Hip inductiva}
x Min m.xs

Entonces, derivando obtengo: 
m :: [Num] -> Num
m [] = +infinito
m (x:xs) = x Min m.xs

-----------
Ejercicio 7
-----------

Especificar y derivar una funcion que dada una lista determine si
existe un elemento en ella que sea igual a la suma del resto de los elementos de
la lista.

f :: [Num] -> Bool
f.xs = <existe i : 0 <= i < #xs : xs.i = sum.xs - xs.i>

caso base:
= {esp f}
<existe i : 0 <= i < #[] : [].i = sum.[] - [].i>
= {def #, Rango vacio} (#[] = 0)
False (Neutro del existe)

Entonces: f.[] = False

caso inductivo:
= {esp f}
<existe i : 0 <= i < #(x:xs) : (x:xs).i = sum.(x:xs) - (x:xs).i>
= {def #, sum, particion de rango}
<existe i : 0 <= i < 1 : (x:xs).i = x + sum.xs - (x:xs).i> ó <existe i : 1 <= i < 1 + #xs : (x:xs).i = x + sum.xs - (x:xs).i>
= {rango unitario, aritmetica, i <- i+1}
x = x + sum.xs - x ó <existe i :  1 <= i+1 < 1 + #xs : (x:xs).i+1 = x+sum.xs - (x:xs).i+1
= {resto 1 en rango, def index ((x:xs).i+1 = xs.i)}
x = sum.xs ó <existe i :  0 <= i < #xs : xs.i = x+sum.xs - xs.i 

Observacion : (veo que tengo que usar generalizacion porque tengo un x +sum.xs) 
Si utilizo el neutro de la op y me queda la especificacion orginal debo usar generalizacion.

Utilizo generalizacion
g.xs.n = <existe i :  0 <= i < #xs : xs.i = x+sum.xs - xs.i 

caso base:
= {esp f}
<existe i : 0 <= i < #[] : [].i = x + sum.[] - [].i>
= {def #, Rango vacio} (#[] = 0)
False (Neutro del existe)

caso inductivo: x:xs
= {esp}
<existe i : 0 <= i < #(x:xs) : (x:xs).i = n + sum.(x:xs) - (x:xs).i>
= {Separacion de termino} 
(x = n + sum.(x:xs) - x) ó <existe i : 0 <= i< #xs : (x:xs).i+1 = n + x + sum.xs - (x:xs).i+1
= {def sum}
(x = n + x + sum.xs - x) ó <existe i : 0 <= i< #xs : (x:xs).i+1 = n + x + sum.xs - (x:xs).i+1
= {arit, index}
x = n + sum.xs ó <existe i : 0 <= i< #xs : (xs).i = n + x + sum.xs - (xs).i
= {Hipotesis inductiva}
x = n + sum.xs ó  g.xs.(n+x)


Entonces derivando con la tecnica de generalizacion obtenemos la siguiente definicion de g: 

g :: [Num] -> Num -> Bool
g.[].n = False
g.(x:xs).n = x = n + sum.xs ó  g.xs.(n+x)


-----------
Ejercicio 8
-----------

f : Nat → Bool


------------
Ejercicio 10
------------

sum.xs = <sumatoria i : 0 < i <= #xs : xs.i>
sum [] = 0
sum (x:xs) = x + sum.xs

cant.xs = <contatoria i : 0 < i <= #xs : i>
cant [] = 0
cant xs = 1 + cant.xs

prom.xs = <sumatoria i : 0 <= i < #xs> / <contatoria i : 0 < i <= #xs : i>
prom.xs = sum.xs / cant.xs
prom.xs = (sum.xs, cant.xs)

Caso base: xs.[]
= {def sum, def cant}
(0,0)

Caso inductivo: x:xs
(sum.(x:xs), cant.(x:xs))
= {def sum, def cant}
(x + sum.xs, 1 + cant.xs)
= {introducimos a y b}
(x + a, 1 + b)
[a = sum.xs
 b = cant.xs]
= {Igualdad de pares}
(x+a, 1+b)
[(a,b)= (sum.xs, cont.xs)]
{hip inductiva}
(x + a, 1 + b)
[(a,b) = prom.xs]

prom [] = (0,0)
prom (x:xs) = (x + a, 1 + b)
    where (a,b) = prom xs

